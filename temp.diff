diff --git a/tests/src/model/environment/Environment_test.cpp b/tests/src/model/environment/Environment_test.cpp
index 654e333..4292d86 100644
--- a/tests/src/model/environment/Environment_test.cpp
+++ b/tests/src/model/environment/Environment_test.cpp
@@ -41,7 +41,7 @@ TEST_CASE("Environment", "[Environment]") {
         REQUIRE(env.get(x).asNumber() == three.asNumber());
     }
 
-    SECTION("All calls to bind() after the first with an identifier throw") {
+    SECTION("All calls to bind() after the first with an canonName throw") {
         env.bind(x, five);
         REQUIRE_THROWS(env.bind(x, three));
         REQUIRE_THROWS(env.bind(x, five));
diff --git a/tests/src/model/environment/Identifier_test.cpp b/tests/src/model/environment/Identifier_test.cpp
index ace68a9..3a1aae8 100644
--- a/tests/src/model/environment/Identifier_test.cpp
+++ b/tests/src/model/environment/Identifier_test.cpp
@@ -15,19 +15,19 @@ TEST_CASE("Identifier", "[Environment]") {
     Identifier anotherOne("x");
     std::vector<std::string> words {"Hello", "World", "Identifier"};
 
-    SECTION("An identifier can be initialized with a naked string") {
+    SECTION("An canonName can be initialized with a naked string") {
         Identifier stringIdentifier("hi");
     }
 
-    SECTION("An identifier can be initialized with a vector of strings") {
+    SECTION("An canonName can be initialized with a vector of strings") {
         Identifier vectorIdentifier(words);
     }
 
     SECTION("The string representation is achieved by inserting (__) between words") {
         Identifier stringIdentifier("Hello");
         Identifier vectorIdentifier(words);
-        REQUIRE(stringIdentifier.identifier() == "Hello");
-        REQUIRE(vectorIdentifier.identifier() == "Hello(__)World(__)Identifier");
+        REQUIRE(stringIdentifier.canonName() == "Hello");
+        REQUIRE(vectorIdentifier.canonName() == "Hello(__)World(__)Identifier");
     }
 
     SECTION("Two identifiers are == iff their string representations are the same") {
diff --git a/tests/src/model/evaluators/GraceEvaluator_test.cpp b/tests/src/model/evaluators/GraceEvaluator_test.cpp
index 9294bbe..b659f95 100644
--- a/tests/src/model/evaluators/GraceEvaluator_test.cpp
+++ b/tests/src/model/evaluators/GraceEvaluator_test.cpp
@@ -35,7 +35,7 @@ TEST_CASE("Grace Evaluator", "[Evaluators]") {
         REQUIRE(eval.getPartialDouble() == fiveNat.value());
     }
 
-    SECTION("If the identifier of a constant already exists in the environment, it throws an exception") {
+    SECTION("If the canonName of a constant already exists in the environment, it throws an exception") {
         Constant xConstant("x", six);
         REQUIRE_NOTHROW(eval.evaluate(xConstant));
         REQUIRE_THROWS(eval.evaluate(xConstant));
diff --git a/tests/src/model/expressions/VariableReference_test.cpp b/tests/src/model/expressions/VariableReference_test.cpp
index 3911a87..aaf5eb2 100644
--- a/tests/src/model/expressions/VariableReference_test.cpp
+++ b/tests/src/model/expressions/VariableReference_test.cpp
@@ -10,7 +10,7 @@
 using namespace naylang;
 
 TEST_CASE("VariableReference Expressions", "[Expressions]") {
-    SECTION("A variable reference just needs an identifier") {
+    SECTION("A variable reference just needs an canonName") {
         auto name = "y";
         VariableReference refenenceY(name);
 
diff --git a/tests/src/model/expressions/methods/MethodCall_test.cpp b/tests/src/model/expressions/methods/MethodCall_test.cpp
index 229e31a..30f4f7b 100644
--- a/tests/src/model/expressions/methods/MethodCall_test.cpp
+++ b/tests/src/model/expressions/methods/MethodCall_test.cpp
@@ -14,7 +14,7 @@ TEST_CASE("Method Calls", "[Expressions]") {
     Identifier name("myMethod");
     auto zero = std::make_shared<Number>(0.0);
 
-    SECTION("A method call needs an identifier") {
+    SECTION("A method call needs an canonName") {
         MethodCall call(name);
     }
 
diff --git a/tests/src/model/expressions/methods/MethodDeclaration_test.cpp b/tests/src/model/expressions/methods/MethodDeclaration_test.cpp
index 8ea3455..35f4405 100644
--- a/tests/src/model/expressions/methods/MethodDeclaration_test.cpp
+++ b/tests/src/model/expressions/methods/MethodDeclaration_test.cpp
@@ -16,7 +16,7 @@ TEST_CASE("Methd Declarations", "[Expressions]") {
     auto five = std::make_shared<Number>(5.0);
     auto numberBody = std::make_shared<ExpressionBlock>();
 
-    SECTION("A method delaration takes an identifier and a body expression") {
+    SECTION("A method delaration takes an canonName and a body expression") {
         numberBody->addInstruction(five);
         MethodDeclaration method(name, numberBody);
     }
@@ -25,7 +25,7 @@ TEST_CASE("Methd Declarations", "[Expressions]") {
         numberBody->addInstruction(five);
         MethodDeclaration method(name, numberBody);
 
-        REQUIRE(method.getCanonName().identifier() == "myMethod");
+        REQUIRE(method.getCanonName().canonName() == "myMethod");
         REQUIRE(static_cast<Number &>(*(method.getBody()->expressions()[0])).value() == 5.0);
     }
 }
\ No newline at end of file
diff --git a/tests/src/model/statements/Assignment_test.cpp b/tests/src/model/statements/Assignment_test.cpp
index e96f8b7..cf545e2 100644
--- a/tests/src/model/statements/Assignment_test.cpp
+++ b/tests/src/model/statements/Assignment_test.cpp
@@ -11,7 +11,7 @@
 using namespace naylang;
 
 TEST_CASE("Assignment Expressions", "[Expressions]") {
-    SECTION("Assignment Expressions can hold an identifier and a asNumber") {
+    SECTION("Assignment Expressions can hold an canonName and a asNumber") {
         auto five = std::make_shared<Number>(5.0);
         auto name = "y";
         Assignment numberAssignment(name, five);
diff --git a/tests/src/model/statements/VariableDeclaration_test.cpp b/tests/src/model/statements/VariableDeclaration_test.cpp
index d129a9e..6d211ad 100644
--- a/tests/src/model/statements/VariableDeclaration_test.cpp
+++ b/tests/src/model/statements/VariableDeclaration_test.cpp
@@ -10,7 +10,7 @@
 using namespace naylang;
 
 TEST_CASE("VariableDeclaration Expressions", "[Expressions]") {
-    SECTION("A variable declaration just needs an identifier") {
+    SECTION("A variable declaration just needs an canonName") {
         auto name = "y";
         VariableDeclaration declareY(name);
 
